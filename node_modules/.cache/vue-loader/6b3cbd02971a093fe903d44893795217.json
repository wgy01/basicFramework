{"remainingRequest":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\views\\main\\header\\tag\\tag-module.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\views\\main\\header\\tag\\tag-module.vue","mtime":1536630730967},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n.dropdownTop .ivu-select-dropdown{\n\tmargin-top: 8px !important;\n}\n",{"version":3,"sources":["tag-module.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA","file":"tag-module.vue","sourceRoot":"src\\views\\main\\header\\tag","sourcesContent":["<style scoped lang=\"less\">\r\n</style>\n<style>\r\n\t.dropdownTop .ivu-select-dropdown{\r\n\t\tmargin-top: 8px !important;\r\n\t}\r\n</style>\r\n\r\n<template>\r\n\r\n\t<div style=\"display: flex;align-items: center;background: #EBEBEB;height: 38px;line-height: 38px;\">\r\n\t\t\r\n\t\t<div style=\"flex-shrink: 0;height: 37px;width: 26px;background: #fff;display: flex;align-items: center;\">\r\n\t\t\t<Button type=\"text\" style=\"padding: 0;width: 100%;height: 28px;float: left;\">\r\n\t\t\t\t<Icon size=\"20\" type=\"ios-arrow-back\" />\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div style=\"width: 100%;overflow: hidden;\">\r\n\t\t\t\r\n\t\t\t<div style=\"white-space:nowrap;display: inline-block;padding-left: 4px;\">\r\n\t\t\t\t\r\n\t\t\t\t<Tag type=\"dot\" closable color=\"primary\">标签一</Tag>\r\n\t\t\n\t\t\t\t<Tag type=\"dot\" closable color=\"primary\">标签一</Tag>\r\n\t\t\t\t\n\t\t\t\t<Tag type=\"dot\" closable color=\"primary\">标签一</Tag>\r\n\t\t\t\t\n\t\t\t\t<Tag type=\"dot\" closable color=\"primary\">标签一</Tag>\r\n\t\t\t\t\n\t\t\t\t<Tag type=\"dot\" closable color=\"primary\">标签一</Tag>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t\r\n\t\t<div style=\"flex-shrink: 0;height: 37px;width: 26px;background: #fff;display: flex;align-items: center;\">\r\n\t\t\t<Button type=\"text\" style=\"padding: 0;width: 100%;height: 28px;float: right;\">\r\n\t\t\t\t<Icon size=\"20\" type=\"ios-arrow-forward\" />\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t\t\n\t\t<div style=\"flex-shrink: 0;height: 37px;width: 34px;background: #fff;margin-left: 1px;display: flex;align-items: center;\">\r\n\t\t\t<Dropdown placement=\"bottom-end\" style=\"display: flex;\" class=\"dropdownTop\">\r\n\t\t        <div style=\"display: flex;\">\r\n\t           \t\t<Button type=\"text\" style=\"padding: 0;width: 33px;height: 28px;\">\r\n\t\t\t\t\t\t<Icon size=\"20\" type=\"ios-close-circle-outline\" />\r\n\t\t\t\t\t</Button>\r\n\t\t        </div>\r\n\t\t        <DropdownMenu slot=\"list\">\r\n\t\t            <DropdownItem>关闭其他</DropdownItem>\r\n\t\t            <DropdownItem>关闭全部</DropdownItem>\r\n\t\t        </DropdownMenu>\r\n\t\t    </Dropdown>\r\n\t\t</div>\r\n\t\t\r\n\t</div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport { mapMutations } from 'vuex';\r\n\r\nexport default {\r\n\tcomponents: { //组件模板\r\n\t\t\r\n\t},\r\n\tprops: { //组件道具（参数）\r\n\t\t\r\n\t\t/* ****属性用法*****\r\n\t\t * \r\n\t\t * 传递类型 type: Array | Number | String | Object\r\n\t\t * 为必传 required: true\r\n\t\t * 默认值 default: ''\r\n\t\t * \r\n\t\t */\r\n\t\t\r\n\t},\r\n\tdata() { //数据\r\n\t\treturn {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t},\r\n\tmethods: { //方法\r\n\t\t\r\n\t\t...mapMutations([\r\n\t\t\t'setTagNavList',\r\n\t\t\t'addTag',\r\n\t    ]),\r\n\t    \r\n\t    handleCloseTag(res, type, route) {\r\n\t\t\tlet openName = ''\r\n\t\t\tif(type === 'all') {\r\n\t\t\t\tthis.turnToPage('home')\r\n\t\t\t\topenName = 'home'\r\n\t\t\t} else if(routeEqual(this.$route, route)) {\r\n\t\t\t\tif(type === 'others') {\r\n\t\t\t\t\topenName = route.name\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst nextRoute = getNextRoute(this.tagNavList, route)\r\n\t\t\t\t\tthis.$router.push(nextRoute)\r\n\t\t\t\t\topenName = nextRoute.name\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setTagNavList(res)\r\n\t\t\tthis.$refs.sideMenu.updateOpenName(openName)\r\n\t\t},\r\n\t\t\r\n\t},\r\n\tcomputed: { //计算属性\r\n\t\t\r\n\t},\r\n\twatch: { //监测数据变化\r\n\t\t\r\n\t\t'$route'(newRoute){\r\n\t\t\t\r\n\t\t\tthis.setTagNavList(getNewTagList(this.tagNavList, newRoute));\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t},\r\n\r\n\t//===================组件钩子===========================\r\n\r\n\tcreated() { //实例被创建完毕之后执行\r\n\r\n\t},\r\n\tmounted() { //模板被渲染完毕之后执行\r\n\t\t\r\n\t\t/*\r\n     \t* @description 初始化设置标签导航\r\n     \t*/\r\n\t    this.setTagNavList();\r\n\t    \r\n\t    this.addTag({route: this.$store.state.app.homeRoute});\r\n\t\t\r\n\t},\r\n\r\n}\r\n</script>"]}]}