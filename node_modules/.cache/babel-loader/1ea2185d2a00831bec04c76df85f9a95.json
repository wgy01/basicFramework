{"remainingRequest":"E:\\GitHub\\hotelSystem\\node_modules\\babel-loader\\lib\\index.js!E:\\GitHub\\hotelSystem\\src\\toolBox\\index.js","dependencies":[{"path":"E:\\GitHub\\hotelSystem\\src\\toolBox\\index.js","mtime":1540366943749},{"path":"E:\\GitHub\\hotelSystem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\GitHub\\hotelSystem\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.object.assign\";\nimport _toConsumableArray from \"E:\\\\GitHub\\\\hotelSystem\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n\n/*\r\n * 检查权限\r\n * @param routerAccess 路由权限\r\n * @param userAccess 用户权限\r\n */\nexport var accessDecide = function accessDecide(routerAccess, userAccess) {\n  if (routerAccess && routerAccess.length > 0 && userAccess && userAccess.length > 0) {\n    return userAccess.some(function (item, index, rawArr) {\n      return routerAccess.indexOf(rawArr[index]) >= 0;\n    });\n  } else {\n    return true;\n  }\n};\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\n\nexport var objEqual = function objEqual(obj1, obj2) {\n  var keysArr1 = Object.keys(obj1);\n  var keysArr2 = Object.keys(obj2);\n  if (keysArr1.length !== keysArr2.length) return false;else if (keysArr1.length === 0 && keysArr2.length === 0) return true;\n  /* eslint-disable-next-line */\n  else return !keysArr1.some(function (key) {\n      return obj1[key] != obj2[key];\n    });\n};\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\n\nexport var routeEqual = function routeEqual(route1, route2) {\n  var params1 = route1.params || {};\n  var params2 = route2.params || {};\n  var query1 = route1.query || {};\n  var query2 = route2.query || {};\n  return route1.name === route2.name && objEqual(params1, params2) && objEqual(query1, query2);\n};\n/*\r\n * 过滤菜单列表\r\n * @param routerList 路由列表\r\n * @param userAccess 用户权限\r\n */\n\nexport var getMenuByRouter = function getMenuByRouter(routerList, userAccess) {\n  var res = [];\n  routerList.forEach(function (item) {\n    if (!item.meta || item.meta && !item.meta.hideMenu) {\n      var obj = {\n        icon: item.meta && item.meta.icon || '',\n        name: item.name,\n        meta: item.meta\n      };\n\n      if ((item.children && item.children.length > 0 || item.meta && item.meta.showAlways) && accessDecide(item.meta.access, userAccess)) {\n        obj.children = getMenuByRouter(item.children, userAccess);\n      } //if(item.meta && item.meta.href) obj.href = item.meta.href\n\n\n      if (accessDecide(item.meta.access, userAccess)) res.push(obj);\n    }\n  });\n  return res;\n};\n/*\r\n * 设置面包屑导航\r\n * @param routeMatched 路由matched属性\r\n * @param homeRoute 路由name属性等于home的数据\r\n */\n\nexport var setBreadcrumb = function setBreadcrumb(routeMatched, homeRoute) {\n  var res = routeMatched.filter(function (item) {\n    return item.meta === undefined || !item.meta.hideBreadcrumb;\n  }).map(function (item) {\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: item.meta\n    };\n    return obj;\n  });\n  res = res.filter(function (item) {\n    return !item.meta.hideMenu;\n  });\n  return [Object.assign(homeRoute, {\n    to: homeRoute.path\n  })].concat(_toConsumableArray(res));\n};\n/*\r\n * 获取name属性等于home的路由\r\n * @param routerList 路由列表\r\n */\n\nexport var getHomeRoute = function getHomeRoute(routerList) {\n  var i = -1;\n  var len = routerList.length;\n  var homeRoute = {};\n\n  while (++i < len) {\n    var item = routerList[i];\n\n    if (item.children && item.children.length) {\n      var res = getHomeRoute(item.children);\n      if (res.name) return res;\n    } else {\n      if (item.name === 'home') homeRoute = item;\n    }\n  }\n\n  return homeRoute;\n};\n/**\r\n * 设置本地存储的标签导航列表\r\n */\n\nexport var setTagNavListInLocalstorage = function setTagNavListInLocalstorage(list) {\n  sessionStorage.tagNaveList = JSON.stringify(list);\n};\n/**\r\n * @description 获取本地存储中的标签导航列表\r\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\r\n */\n\nexport var getTagNavListFromLocalstorage = function getTagNavListFromLocalstorage() {\n  var list = sessionStorage.tagNaveList;\n  return list ? JSON.parse(list) : [];\n};\n/**\r\n * 获取新的tag导航列表\r\n * @param {*} list 现有标签导航列表\r\n * @param {*} newRoute 新添加的路由原信息对象\r\n * @description 如果该newRoute已经存在则不再添加\r\n */\n\nexport var getNewTagList = function getNewTagList(list, newRoute) {\n  var name = newRoute.name,\n      path = newRoute.path,\n      meta = newRoute.meta;\n\n  var newList = _toConsumableArray(list);\n\n  if (newList.findIndex(function (item) {\n    return item.name === name;\n  }) >= 0) return newList;else newList.push({\n    name: name,\n    path: path,\n    meta: meta\n  });\n  return newList;\n};\n/**\r\n * @param {Number} times 回调函数需要执行的次数\r\n * @param {Function} callback 回调函数\r\n */\n\nexport var doCustomTimes = function doCustomTimes(times, callback) {\n  var i = -1;\n\n  while (++i < times) {\n    callback(i);\n  }\n};\n/**\r\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\r\n * @param tagNavList tag标签列表\r\n * @param routeItem 路由项目\r\n */\n\nexport var routeHasExist = function routeHasExist(tagNavList, routeItem) {\n  var len = tagNavList.length;\n  var res = false;\n  doCustomTimes(len, function (index) {\n    if (routeEqual(tagNavList[index], routeItem)) res = true;\n  });\n  return res;\n};\n/**\r\n * 权鉴\r\n * @param {*} routeName 即将跳转的路由name\r\n * @param {*} userAccess 用户权限数组\r\n * @param {*} routeList 路由列表\r\n * @description 用户是否可跳转到该页\r\n */\n\nexport var canTurnTo = function canTurnTo(routeList, userAccess, routeName) {\n  var routePermissionJudge = function routePermissionJudge(list) {\n    return list.some(function (item) {\n      if (item.name === routeName) {\n        return accessDecide(item.meta.access, userAccess);\n      } else if (item.children && item.children.length > 0) {\n        return routePermissionJudge(item.children);\n      }\n    });\n  };\n\n  return routePermissionJudge(routeList);\n};\n/*\r\n * 跳转的路由路径不完整\r\n */\n\nexport var pathImperfect = function pathImperfect(routeList, routeName) {\n  var imperfect = function imperfect(list) {\n    return list.some(function (item) {\n      if (item.children && item.children.length > 0) if (item.name === routeName) return true;else return imperfect(item.children);\n    });\n  };\n\n  return imperfect(routeList);\n};",{"version":3,"sources":["src\\toolBox\\index.js"],"names":["accessDecide","routerAccess","userAccess","length","some","item","index","rawArr","indexOf","objEqual","obj1","obj2","keysArr1","Object","keys","keysArr2","key","routeEqual","route1","route2","params1","params","params2","query1","query","query2","name","getMenuByRouter","routerList","res","forEach","meta","hideMenu","obj","icon","children","showAlways","access","push","setBreadcrumb","routeMatched","homeRoute","filter","undefined","hideBreadcrumb","map","assign","to","path","getHomeRoute","i","len","setTagNavListInLocalstorage","sessionStorage","tagNaveList","JSON","stringify","list","getTagNavListFromLocalstorage","parse","getNewTagList","newRoute","newList","findIndex","doCustomTimes","times","callback","routeHasExist","tagNavList","routeItem","canTurnTo","routeList","routeName","routePermissionJudge","pathImperfect","imperfect"],"mappings":"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","sourceRoot":"E:\\GitHub\\hotelSystem","sourcesContent":["\r\n/*\r\n * 检查权限\r\n * @param routerAccess 路由权限\r\n * @param userAccess 用户权限\r\n */\r\nexport const accessDecide = (routerAccess,userAccess) => {\r\n\tif((routerAccess && routerAccess.length > 0) && (userAccess && userAccess.length > 0)){\r\n\t\treturn userAccess.some((item,index,rawArr) => routerAccess.indexOf(rawArr[index]) >= 0);\r\n\t}else{\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\r\nexport const objEqual = (obj1, obj2) => {\r\n\tconst keysArr1 = Object.keys(obj1)\r\n\tconst keysArr2 = Object.keys(obj2)\r\n\tif(keysArr1.length !== keysArr2.length) return false\r\n\telse if(keysArr1.length === 0 && keysArr2.length === 0) return true\r\n\t/* eslint-disable-next-line */\r\n\telse return !keysArr1.some(key => obj1[key] != obj2[key])\r\n}\r\n\r\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\r\nexport const routeEqual = (route1, route2) => {\r\n\tconst params1 = route1.params || {}\r\n\tconst params2 = route2.params || {}\r\n\tconst query1 = route1.query || {}\r\n\tconst query2 = route2.query || {}\r\n\treturn(route1.name === route2.name) && objEqual(params1, params2) && objEqual(query1, query2)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * 过滤菜单列表\r\n * @param routerList 路由列表\r\n * @param userAccess 用户权限\r\n */\r\nexport const getMenuByRouter = (routerList, userAccess) => {\r\n\tlet res = [];\r\n\trouterList.forEach(item => {\r\n\t\tif(!item.meta || (item.meta && !item.meta.hideMenu)) {\r\n\t\t\tlet obj = {\r\n\t\t\t\ticon: (item.meta && item.meta.icon) || '',\r\n\t\t\t\tname: item.name,\r\n\t\t\t\tmeta: item.meta\r\n\t\t\t}\r\n\t\t\tif(((item.children && item.children.length > 0) || (item.meta && item.meta.showAlways)) && accessDecide(item.meta.access, userAccess)){\r\n\t\t\t\tobj.children = getMenuByRouter(item.children, userAccess);\r\n\t\t\t}\r\n\t\t\t//if(item.meta && item.meta.href) obj.href = item.meta.href\r\n\t\t\tif(accessDecide(item.meta.access, userAccess)) res.push(obj)\r\n\t\t}\r\n\t})\r\n\treturn res;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * 设置面包屑导航\r\n * @param routeMatched 路由matched属性\r\n * @param homeRoute 路由name属性等于home的数据\r\n */\r\nexport const setBreadcrumb = (routeMatched, homeRoute) => {\r\n\tlet res = routeMatched.filter(item => {\r\n\t\treturn item.meta === undefined || !item.meta.hideBreadcrumb\r\n\t}).map(item => {\r\n\t\tlet obj = {\r\n\t\t\ticon: (item.meta && item.meta.icon) || '',\r\n\t\t\tname: item.name,\r\n\t\t\tmeta: item.meta\r\n\t\t}\r\n\t\treturn obj\r\n\t})\r\n\tres = res.filter(item => {\r\n\t\treturn !item.meta.hideMenu\r\n\t})\r\n\treturn [Object.assign(homeRoute, {to: homeRoute.path}), ...res]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * 获取name属性等于home的路由\r\n * @param routerList 路由列表\r\n */\r\nexport const getHomeRoute = routerList => {\r\n\tlet i = -1\r\n\tlet len = routerList.length\r\n\tlet homeRoute = {}\r\n\twhile(++i < len) {\r\n\t\tlet item = routerList[i]\r\n\t\tif(item.children && item.children.length) {\r\n\t\t\tlet res = getHomeRoute(item.children)\r\n\t\t\tif(res.name) return res\r\n\t\t} else {\r\n\t\t\tif(item.name === 'home') homeRoute = item\r\n\t\t}\r\n\t}\r\n\treturn homeRoute\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 设置本地存储的标签导航列表\r\n */\r\nexport const setTagNavListInLocalstorage = list => {\r\n  sessionStorage.tagNaveList = JSON.stringify(list);\r\n}\r\n\r\n/**\r\n * @description 获取本地存储中的标签导航列表\r\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\r\n */\r\nexport const getTagNavListFromLocalstorage = () => {\r\n  const list = sessionStorage.tagNaveList;\r\n  return list ? JSON.parse(list) : [];\r\n}\r\n\r\n/**\r\n * 获取新的tag导航列表\r\n * @param {*} list 现有标签导航列表\r\n * @param {*} newRoute 新添加的路由原信息对象\r\n * @description 如果该newRoute已经存在则不再添加\r\n */\r\nexport const getNewTagList = (list, newRoute) => {\r\n  const { name, path, meta } = newRoute\r\n  let newList = [...list]\r\n  if (newList.findIndex(item => item.name === name) >= 0) return newList\r\n  else newList.push({ name, path, meta })\r\n  return newList\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @param {Number} times 回调函数需要执行的次数\r\n * @param {Function} callback 回调函数\r\n */\r\nexport const doCustomTimes = (times, callback) => {\r\n\tlet i = -1\r\n\twhile(++i < times) {\r\n\t\tcallback(i)\r\n\t}\r\n}\r\n\r\n/**\r\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\r\n * @param tagNavList tag标签列表\r\n * @param routeItem 路由项目\r\n */\r\nexport const routeHasExist = (tagNavList, routeItem) => {\r\n\tlet len = tagNavList.length\r\n\tlet res = false\r\n\tdoCustomTimes(len, (index) => {\r\n\t\tif(routeEqual(tagNavList[index], routeItem)) res = true\r\n\t})\r\n\treturn res\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 权鉴\r\n * @param {*} routeName 即将跳转的路由name\r\n * @param {*} userAccess 用户权限数组\r\n * @param {*} routeList 路由列表\r\n * @description 用户是否可跳转到该页\r\n */\r\nexport const canTurnTo = (routeList, userAccess, routeName) => {\r\n\tconst routePermissionJudge = (list) => {\r\n\t    return list.some(item => {\r\n\t\t\tif (item.name === routeName) {\r\n\t\t\t\treturn accessDecide(item.meta.access,userAccess);\r\n\t\t\t}else if (item.children && item.children.length > 0) {\r\n\t    \t\treturn routePermissionJudge(item.children);\r\n\t    \t}\r\n\t    });\r\n\t}\r\n\treturn routePermissionJudge(routeList);\r\n}\r\n\r\n/*\r\n * 跳转的路由路径不完整\r\n */\r\nexport const pathImperfect = (routeList, routeName) => {\r\n\tconst imperfect = (list) => {\r\n\t\treturn list.some(item => {\r\n\t\t\tif(item.children && item.children.length > 0) if(item.name === routeName) return true; else return imperfect(item.children);\r\n\t\t});\r\n\t}\r\n\treturn imperfect(routeList);\r\n}\r\n"]}]}