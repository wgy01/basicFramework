{"remainingRequest":"E:\\GitHub\\hotelSystem\\node_modules\\babel-loader\\lib\\index.js!E:\\GitHub\\hotelSystem\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\GitHub\\hotelSystem\\src\\views\\goods\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\GitHub\\hotelSystem\\src\\views\\goods\\index.vue","mtime":1579247140287},{"path":"E:\\GitHub\\hotelSystem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\GitHub\\hotelSystem\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"E:\\GitHub\\hotelSystem\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\GitHub\\\\hotelSystem\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: '',\n  components: {//组件模板\n  },\n  props: {//组件道具（参数）\n\n    /* ****属性用法*****\r\n     * \r\n     * 传递类型 type: Array | Number | String | Object\r\n     * 为必传 required: true\r\n     * 默认值 default: ''\r\n     * \r\n     */\n  },\n  data: function data() {\n    //数据\n    return {\n      modal: false,\n      formData: {},\n      formRules: [],\n      goodsColumns: [{\n        width: 80,\n        title: '图片',\n        render: function render(h, params) {\n          return h('img', {\n            style: {\n              width: '100%'\n            },\n            attrs: {\n              src: 'https://file.iviewui.com/dist/2ecd3b0452aa197097d5131afacab7b8.png'\n            }\n          });\n        }\n      }, {\n        title: '商品名称',\n        key: 'name'\n      }, {\n        title: '商品代码',\n        key: 'code'\n      }, {\n        title: '单价(元)',\n        key: 'price'\n      }, {\n        title: '库存',\n        key: 'num'\n      }, {\n        align: 'center',\n        title: '操作',\n        render: function render(h, params) {\n          return h('div', [h('Button', {\n            props: {\n              type: 'success',\n              size: 'small'\n            },\n            style: {\n              marginRight: '10px'\n            }\n          }, '编辑'), h('Button', {\n            props: {\n              type: 'primary',\n              size: 'small'\n            },\n            style: {\n              marginRight: '10px'\n            }\n          }, '管理'), h('Button', {\n            props: {\n              type: 'error',\n              size: 'small'\n            }\n          }, '删除')]);\n        }\n      }],\n      goodsList: [{\n        name: '老坛酸菜牛肉面',\n        num: 1000,\n        price: 5,\n        code: '45616548789654'\n      }]\n    };\n  },\n  methods: {//方法\n  },\n  computed: {//计算属性\n  },\n  watch: {//监测数据变化\n  },\n  //===================组件钩子===========================\n  created: function created() {//实例被创建完毕之后执行\n  },\n  mounted: function mounted() {//模板被渲染完毕之后执行\n  },\n  //=================组件路由勾子==============================\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    //在组件创建之前调用（放置页面加载时请求的Ajax）\n    _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //执行异步函数\n              //async、await错误处理\n              try {\n                /*\r\n                 * \r\n                 * ------串行执行---------\r\n                 * console.log(await getAjaxData());\r\n                 * ...\r\n                 * \r\n                 * ---------并行：将多个promise直接发起请求（先执行async所在函数），然后再进行await操作。（执行效率高、快）----------\r\n                 * let abc = getAjaxData();//先执行promise函数\r\n                 * ...\r\n                 * console.log(await abc);\r\n                 * ...\r\n                */\n                next(function (vm) {});\n              } catch (err) {\n                console.log(err);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }))();\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,eAAA;AACA,QAAA,EADA;AAEA,cAAA,CAAA;AAAA,GAFA;AAIA,SAAA,CAAA;;AACA;;;;;;;AADA,GAJA;AAaA,MAbA,kBAaA;AAAA;AACA,WAAA;AAEA,aAAA,KAFA;AAIA,gBAAA,EAJA;AAMA,iBAAA,EANA;AAQA,oBAAA,CACA;AACA,eAAA,EADA;AAEA,eAAA,IAFA;AAGA,gBAAA,gBAAA,CAAA,EAAA,MAAA,EAAA;AACA,iBAAA,EAAA,KAAA,EAAA;AACA,mBAAA;AACA,qBAAA;AADA,aADA;AAIA,mBAAA;AACA,mBAAA;AADA;AAJA,WAAA,CAAA;AAQA;AAZA,OADA,EAeA;AACA,eAAA,MADA;AAEA,aAAA;AAFA,OAfA,EAmBA;AACA,eAAA,MADA;AAEA,aAAA;AAFA,OAnBA,EAuBA;AACA,eAAA,OADA;AAEA,aAAA;AAFA,OAvBA,EA2BA;AACA,eAAA,IADA;AAEA,aAAA;AAFA,OA3BA,EA+BA;AACA,eAAA,QADA;AAEA,eAAA,IAFA;AAGA,gBAAA,gBAAA,CAAA,EAAA,MAAA,EAAA;AACA,iBAAA,EAAA,KAAA,EAAA,CACA,EAAA,QAAA,EAAA;AACA,mBAAA;AACA,oBAAA,SADA;AAEA,oBAAA;AAFA,aADA;AAKA,mBAAA;AACA,2BAAA;AADA;AALA,WAAA,EAQA,IARA,CADA,EAUA,EAAA,QAAA,EAAA;AACA,mBAAA;AACA,oBAAA,SADA;AAEA,oBAAA;AAFA,aADA;AAKA,mBAAA;AACA,2BAAA;AADA;AALA,WAAA,EAQA,IARA,CAVA,EAmBA,EAAA,QAAA,EAAA;AACA,mBAAA;AACA,oBAAA,OADA;AAEA,oBAAA;AAFA;AADA,WAAA,EAKA,IALA,CAnBA,CAAA,CAAA;AA0BA;AA9BA,OA/BA,CARA;AAyEA,iBAAA,CACA;AACA,cAAA,SADA;AAEA,aAAA,IAFA;AAGA,eAAA,CAHA;AAIA,cAAA;AAJA,OADA;AAzEA,KAAA;AAmFA,GAjGA;AAkGA,WAAA,CAAA;AAAA,GAlGA;AAqGA,YAAA,CAAA;AAAA,GArGA;AAwGA,SAAA,CAAA;AAAA,GAxGA;AA4GA;AAEA,SA9GA,qBA8GA,CAAA;AAEA,GAhHA;AAiHA,SAjHA,qBAiHA,CAAA;AAEA,GAnHA;AAqHA;AAEA,kBAvHA,4BAuHA,EAvHA,EAuHA,IAvHA,EAuHA,IAvHA,EAuHA;AAAA;AAEA;AAAA;AAAA,4BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA,kBAAA;AAEA;;;;;;;;;;;;AAYA,qBAAA,cAAA,CAEA,CAFA;AAIA,eAlBA,CAkBA,OAAA,GAAA,EAAA;AACA,wBAAA,GAAA,CAAA,GAAA;AACA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA;AA2BA;AApJA,CAAA","sourcesContent":["<template>\r\n\t\r\n\t<div>\r\n\t\t\r\n\t\t<Button type=\"primary\" @click=\"modal = true\">新增商品</Button>\r\n\t\t\r\n\t\t<Table border :columns=\"goodsColumns\" :data=\"goodsList\"></Table>\r\n\t\t\r\n\t\t<Modal\r\n\t        v-model=\"modal\"\r\n\t        title=\"新增商品\">\r\n\t        \r\n\t        <Form ref=\"formInstance\" :label-width=\"80\">\r\n\t        \t\r\n\t        \t<FormItem label=\"商品名称\">\r\n\t\t            <Input></Input>\r\n\t\t        </FormItem>\r\n\t\t        \r\n\t\t        <FormItem label=\"商品代码\">\r\n\t\t            <Input></Input>\r\n\t\t        </FormItem>\r\n\t\t        \r\n\t\t        <FormItem label=\"商品单价\">\r\n\t\t            <Input></Input>\r\n\t\t        </FormItem>\r\n\t\t        \n\t        \t<FormItem label=\"商品库存\">\r\n\t\t            <Input></Input>\r\n\t\t        </FormItem>\r\n\t\t        \n\t        \t<FormItem label=\"商品图片\">\r\n\t\t            <Input></Input>\r\n\t\t        </FormItem>\r\n\t\t        \n\t        </Form>\r\n\t        \r\n\t    </Modal>\r\n\t\t\r\n\t</div>\r\n\t\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\tname: '',\r\n\tcomponents:{//组件模板\r\n\t},\r\n\tprops:{//组件道具（参数）\r\n\t\t/* ****属性用法*****\r\n\t\t * \r\n\t\t * 传递类型 type: Array | Number | String | Object\r\n\t\t * 为必传 required: true\r\n\t\t * 默认值 default: ''\r\n\t\t * \r\n\t\t */\r\n\t},\r\n    data () {//数据\r\n        return {\r\n        \t\r\n        \tmodal: false,\r\n        \t\r\n        \tformData: {},\r\n        \t\r\n        \tformRules: [],\r\n        \t\r\n        \tgoodsColumns: [\r\n        \t\t{\r\n        \t\t\twidth: 80,\r\n                \ttitle: '图片',\r\n                \trender: (h, params) => {\r\n                \t\treturn h('img', {\r\n                \t\t\tstyle: {\r\n                \t\t\t\twidth: '100%'\r\n                \t\t\t},\r\n                \t\t\tattrs: {\r\n                \t\t\t\tsrc: 'https://file.iviewui.com/dist/2ecd3b0452aa197097d5131afacab7b8.png'\r\n                \t\t\t}\r\n                \t\t})\r\n                \t}\r\n                },\r\n        \t\t{\r\n                \ttitle: '商品名称',\r\n                \tkey: 'name'\r\n                },\r\n                {\r\n                \ttitle: '商品代码',\r\n                \tkey: 'code'\r\n                },\r\n                {\r\n                \ttitle: '单价(元)',\r\n                \tkey: 'price'\r\n                },\n        \t\t{\r\n                \ttitle: '库存',\r\n                \tkey: 'num'\r\n                },\n                {\r\n                \talign: 'center',\r\n                \ttitle: '操作',\r\n                \trender: (h, params) => {\r\n                \t\treturn h('div', [\r\n                \t\t\th('Button', {\r\n                \t\t\t\tprops: {\r\n                                    type: 'success',\r\n                                    size: 'small'\r\n                                },\r\n                                style: {\r\n                                \tmarginRight: '10px'\r\n                                },\r\n                \t\t\t}, '编辑'),\n                \t\t\th('Button', {\r\n                \t\t\t\tprops: {\r\n                                    type: 'primary',\r\n                                    size: 'small'\r\n                                },\r\n                                style: {\r\n                                \tmarginRight: '10px'\r\n                                },\r\n                \t\t\t}, '管理'),\n                \t\t\th('Button', {\r\n                \t\t\t\tprops: {\r\n                                    type: 'error',\r\n                                    size: 'small'\r\n                                },\r\n                \t\t\t}, '删除'),\r\n                \t\t])\r\n                \t}\r\n                },\r\n        \t],\r\n        \t\r\n        \tgoodsList: [\r\n        \t\t{\r\n        \t\t\tname: '老坛酸菜牛肉面',\r\n        \t\t\tnum: 1000,\r\n        \t\t\tprice: 5,\r\n        \t\t\tcode: '45616548789654',\r\n        \t\t}\r\n        \t],\r\n        \t\r\n        }\r\n    },\r\n    methods: {//方法\r\n    \t\r\n    },\r\n    computed: {//计算属性\r\n        \t\r\n    },\r\n    watch: {//监测数据变化\r\n    \t\r\n\t},\r\n    \r\n    //===================组件钩子===========================\r\n    \r\n    created () {//实例被创建完毕之后执行\r\n    \t\r\n\t},\r\n    mounted () {//模板被渲染完毕之后执行\r\n    \t\r\n\t},\r\n\t\r\n\t//=================组件路由勾子==============================\r\n\t\r\n\tbeforeRouteEnter (to, from, next) {//在组件创建之前调用（放置页面加载时请求的Ajax）\r\n\t\t\r\n\t\t(async() => {//执行异步函数\r\n\t\t\t\r\n\t\t\t//async、await错误处理\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * \r\n\t\t\t\t * ------串行执行---------\r\n\t\t\t\t * console.log(await getAjaxData());\r\n\t\t\t\t * ...\r\n\t\t\t\t * \r\n\t\t\t\t * ---------并行：将多个promise直接发起请求（先执行async所在函数），然后再进行await操作。（执行效率高、快）----------\r\n\t\t\t\t * let abc = getAjaxData();//先执行promise函数\r\n\t\t\t\t * ...\r\n\t\t\t\t * console.log(await abc);\r\n\t\t\t\t * ...\r\n\t\t\t\t*/\r\n\t\t\t\tnext(vm => {\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t})();\r\n\t\t\r\n\t},\r\n\t\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n\r\n</style>"],"sourceRoot":"src\\views\\goods"}]}