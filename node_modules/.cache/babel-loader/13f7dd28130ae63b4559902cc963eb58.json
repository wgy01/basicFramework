{"remainingRequest":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\babel-loader\\lib\\index.js!E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\axios\\index.js","dependencies":[{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\axios\\index.js","mtime":1539937396847},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n\n/*\r\n * axios配置管理\r\n */\nimport Vue from 'vue';\nimport axios from 'axios';\nvar vm = new Vue();\n/*\r\n\t---------------------vue内使用方式---------------------\r\n\t\r\n\tthis.$axios.post('接口路径', {\r\n\t\t要发送的数据\r\n\t})\r\n\t.then(response => {//返回请求数据\r\n\t\tconsole.log(response)\r\n\t})\r\n\t.catch(function (error) {//返回错误\r\n\t\tconsole.log(error);\r\n\t});\r\n\t\r\n*/\n//--------------------------------------------全局设置-------------------------------\n\naxios.defaults.baseURL = window._HOST.BASE_URL; //配置接口基础地址,在globalVariable.js\n\naxios.defaults.timeout = 5000; //响应超时时间\n\naxios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = function (_data) {\n  //第一个参数_data是接收过来的数据\n  var formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n\n  for (var item in _data) {\n    //for in 遍历数据进行转换\n    formData.append(item, _data[item]);\n  }\n\n  console.log('-->发送了数据:', _data); //\tconsole.log('发送了数据:',formData);\n\n  return formData;\n}; //--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\n\naxios.interceptors.request.use(function (_config) {\n  //在请求发出之前对配置进行一些操作\n  var config = _config; //如果想每次请求的时候更改配置, 在这里增加config配置项\n\n  console.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n  return config;\n}, function (_err) {\n  console.log(_err);\n}); //------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(function (_res) {\n  //在这里对返回的数据进行处理\n  console.log('<--返回了数据', _res.data);\n  return _res.data;\n}, function (_err) {\n  //处理错误\n  console.log('>>>>>>发生了ajax错误');\n  console.log('-------------------------------------------');\n\n  if (_err.response) {\n    //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n    // console.log('_err.response',_err.response);\n    console.log('status:', _err.response.status);\n    console.log('statusText:', _err.response.statusText);\n  } else {//一些错误是在设置请求的时候触发\t\t   \n  }\n\n  console.log('url:', _err.config.url);\n  console.log('method:', _err.config.method);\n  console.log('data:', _err.config.data);\n  console.log('headers:', _err.config.headers);\n  console.log('-------------------------------------------');\n  return _err;\n});\n/**\r\n * 异步获取axios中的数据\r\n */\n\nexport var getAsyncAjaxData = function getAsyncAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve) {\n    axios.post(url, data).then(function (response) {\n      resolve(response);\n    }).catch(function (error) {\n      return console.log('发生了错误：' + error);\n    });\n  });\n};\n/**\r\n * axios发起单个请求\r\n * \r\n * @param {STRING} url 请求数据的路径\r\n * @param {JSON} data 需要发送的数据\r\n * @param {Function} fn 数据响应后的回调函数\r\n */\n\nexport var getAjaxData = function getAjaxData() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fn = arguments.length > 2 ? arguments[2] : undefined;\n  axios.post(url, data).then(function (response) {\n    fn && fn(response);\n  }).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n};\n/**\r\n * axios同时发起多个请求\r\n * \r\n * @param {Array} paramArr 多个请求参数的数组\r\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\r\n */\n\nexport var getAllAjaxData = function getAllAjaxData() {\n  var paramArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n  var newArr = [];\n  paramArr.forEach(function (item) {\n    newArr.push(axios.post(item.url || '', item.data || {}));\n  });\n  axios.all(newArr).then(axios.spread(fn)).catch(function (error) {\n    return console.log('发生了错误：' + error);\n  });\n};",{"version":3,"sources":["src\\axios\\index.js"],"names":["Vue","axios","vm","defaults","baseURL","window","_HOST","BASE_URL","timeout","withCredentials","transformRequest","formData","FormData","item","_data","append","console","log","interceptors","request","use","config","_config","method","url","_err","response","_res","data","status","statusText","headers","getAsyncAjaxData","Promise","post","then","resolve","catch","error","getAjaxData","fn","getAllAjaxData","paramArr","newArr","forEach","push","all","spread"],"mappings":"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","sourceRoot":"E:\\GitHub\\vue2.0-cli3.0-iview3.0","sourcesContent":["/*\r\n * axios配置管理\r\n */\r\n\r\nimport Vue from 'vue'\r\nimport axios from 'axios';\r\nconst vm = new Vue();\r\n\r\n/*\r\n\t---------------------vue内使用方式---------------------\r\n\t\r\n\tthis.$axios.post('接口路径', {\r\n\t\t要发送的数据\r\n\t})\r\n\t.then(response => {//返回请求数据\r\n\t\tconsole.log(response)\r\n\t})\r\n\t.catch(function (error) {//返回错误\r\n\t\tconsole.log(error);\r\n\t});\r\n\t\r\n*/\r\n\r\n//--------------------------------------------全局设置-------------------------------\r\n\r\naxios.defaults.baseURL = window._HOST.BASE_URL; //配置接口基础地址,在globalVariable.js\r\n\r\naxios.defaults.timeout = 5000; //响应超时时间\r\n\r\naxios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\r\n\r\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\r\n\r\naxios.defaults.transformRequest = _data => { //第一个参数_data是接收过来的数据\r\n\r\n\tlet formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\r\n\r\n\tfor(let item in _data) { //for in 遍历数据进行转换\r\n\r\n\t\tformData.append(item, _data[item]);\r\n\r\n\t}\r\n\t\r\n\tconsole.log('-->发送了数据:', _data);\r\n\r\n//\tconsole.log('发送了数据:',formData);\r\n\r\n\treturn formData;\r\n\r\n};\r\n\r\n//--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\r\n\r\naxios.interceptors.request.use(\r\n\t\r\n\t_config => { //在请求发出之前对配置进行一些操作\r\n\r\n\t\tlet config = _config;\r\n\t\t\r\n\t\t//如果想每次请求的时候更改配置, 在这里增加config配置项\r\n\t\r\n\t\tconsole.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\r\n\t\r\n\t\treturn config;\r\n\r\n\t},\r\n\t\r\n\t_err => {\r\n\t\tconsole.log(_err);\r\n\t}\r\n\t\r\n);\r\n\r\n//------------------------添加一个响应拦截器----------------------\r\n\r\naxios.interceptors.response.use(\r\n\r\n\t_res => { //在这里对返回的数据进行处理\r\n\t\t\r\n\t\tconsole.log('<--返回了数据', _res.data);\r\n\r\n\t\treturn _res.data;\r\n\r\n\t},\r\n\t\r\n\t_err => { //处理错误\r\n\r\n\t\tconsole.log('>>>>>>发生了ajax错误');\r\n\r\n\t\tconsole.log('-------------------------------------------');\r\n\r\n\t\tif(_err.response) { //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\r\n\r\n\t\t\t// console.log('_err.response',_err.response);\r\n\r\n\t\t\tconsole.log('status:', _err.response.status);\r\n\r\n\t\t\tconsole.log('statusText:', _err.response.statusText);\r\n\r\n\t\t} else { //一些错误是在设置请求的时候触发\t\t   \r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tconsole.log('url:', _err.config.url);\r\n\r\n\t\tconsole.log('method:', _err.config.method);\r\n\r\n\t\tconsole.log('data:', _err.config.data);\r\n\r\n\t\tconsole.log('headers:', _err.config.headers);\r\n\r\n\t\tconsole.log('-------------------------------------------');\r\n\r\n\t\treturn _err;\r\n\r\n\t}\r\n);\r\n\r\n/**\r\n * 异步获取axios中的数据\r\n */\r\nexport const getAsyncAjaxData = (url = '',data = {}) => {\r\n\treturn new Promise(resolve => {\r\n\t\taxios.post(url, data).then(response => {\r\n\t\t\tresolve(response);\r\n\t\t}).catch(error => console.log('发生了错误：'+error));\r\n\t});\r\n}\r\n\r\n/**\r\n * axios发起单个请求\r\n * \r\n * @param {STRING} url 请求数据的路径\r\n * @param {JSON} data 需要发送的数据\r\n * @param {Function} fn 数据响应后的回调函数\r\n */\r\nexport const getAjaxData = (url = '', data = {}, fn) => {\r\n\taxios.post(url, data).then(response => {\r\n\t\tfn && fn(response);\r\n\t}).catch(error => console.log('发生了错误：'+error));\r\n}\r\n\r\n/**\r\n * axios同时发起多个请求\r\n * \r\n * @param {Array} paramArr 多个请求参数的数组\r\n * @param {Function(返回的数据1,返回的数据2...)} fn 数据响应后的回调函数\r\n */\r\nexport const getAllAjaxData = (paramArr = [], fn) => {\r\n\tlet newArr = [];\r\n\tparamArr.forEach(item => {\r\n\t\tnewArr.push(axios.post(item.url || '',item.data || {}));\r\n\t});\r\n\taxios.all(newArr).then(axios.spread(fn)).catch(error => console.log('发生了错误：'+error));\r\n}"]}]}