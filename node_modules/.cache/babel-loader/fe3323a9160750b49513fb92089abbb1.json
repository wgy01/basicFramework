{"remainingRequest":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\babel-loader\\lib\\index.js!E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\views\\home.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\src\\views\\home.vue","mtime":1536739646092},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"E:\\GitHub\\vue2.0-cli3.0-iview3.0\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\GitHub\\\\vue2.0-cli3.0-iview3.0\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\n\nvar getAjaxData = function getAjaxData() {\n  return new Promise(function (resolve) {\n    axios.post('接口路径', {}).then(function (response) {\n      resolve(response.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n};\n\nexport default {\n  components: {//组件模板\n  },\n  props: {//组件道具（参数）\n\n    /* ****属性用法*****\r\n     * \r\n     * 传递类型 type: Array | Number | String | Object\r\n     * 为必传 required: true\r\n     * 默认值 default: ''\r\n     * \r\n     */\n  },\n  data: function data() {\n    //数据\n    return {};\n  },\n  methods: {//方法\n  },\n  computed: {//计算属性\n  },\n  watch: {//监测数据变化\n  },\n  //===================组件钩子===========================\n  created: function created() {//实例被创建完毕之后执行\n  },\n  mounted: function mounted() {//模板被渲染完毕之后执行\n  },\n  //=================组件路由勾子==============================\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    //在组件创建之前调用（放置页面加载时请求的Ajax）\n    _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //执行异步函数\n              //async、await错误处理\n              try {\n                /**\r\n                 * \r\n                 * ------串行执行---------\r\n                 * console.log(await getAjaxData());\r\n                 * ...\r\n                 * \r\n                 * ---------并行：将多个promise直接发起请求（先执行async所在函数），然后再进行await操作。（执行效率高、快）----------\r\n                 * let abc = getAjaxData();//先执行promise函数\r\n                 * ...\r\n                 * console.log(await abc);\r\n                 * ...\r\n                */\n              } catch (err) {\n                console.log(err);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }))();\n\n    next(function (vm) {});\n  }\n};",{"version":3,"sources":["home.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA,OAAA,KAAA,MAAA,OAAA;;AAEA,IAAA,cAAA,SAAA,WAAA,GAAA;AAEA,SAAA,IAAA,OAAA,CAAA,mBAAA;AAEA,UAAA,IAAA,CAAA,MAAA,EAAA,EAAA,EAGA,IAHA,CAGA,oBAAA;AACA,cAAA,SAAA,IAAA;AACA,KALA,EAMA,KANA,CAMA,UAAA,KAAA,EAAA;AACA,cAAA,GAAA,CAAA,KAAA;AACA,KARA;AAUA,GAZA,CAAA;AAcA,CAhBA;;AAkBA,eAAA;AACA,cAAA,CAAA;AAAA,GADA;AAGA,SAAA,CAAA;;AACA;;;;;;;AADA,GAHA;AAYA,MAZA,kBAYA;AAAA;AACA,WAAA,EAAA;AAGA,GAhBA;AAiBA,WAAA,CAAA;AAAA,GAjBA;AAoBA,YAAA,CAAA;AAAA,GApBA;AAuBA,SAAA,CAAA;AAAA,GAvBA;AA2BA;AAEA,SA7BA,qBA6BA,CAAA;AAEA,GA/BA;AAgCA,SAhCA,qBAgCA,CAAA;AAEA,GAlCA;AAoCA;AAEA,kBAtCA,4BAsCA,EAtCA,EAsCA,IAtCA,EAsCA,IAtCA,EAsCA;AAAA;AAEA;AAAA;AAAA,4BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA,kBAAA;AAEA;;;;;;;;;;;;AAaA,eAfA,CAeA,OAAA,GAAA,EAAA;AACA,wBAAA,GAAA,CAAA,GAAA;AACA;;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA;;AAwBA,SAAA,cAAA,CAEA,CAFA;AAIA;AApEA,CAAA","sourcesContent":["<template>\r\n\t\r\n\t<div>\r\n\t\t\r\n\t\t<h1>首页</h1>\r\n\t\t\r\n\t</div>\r\n\t\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from 'axios';\r\n\r\nlet getAjaxData = () => {\r\n\t\r\n\treturn new Promise(resolve => {\r\n\r\n\t\taxios.post('接口路径', {\r\n\t\t\t\r\n\t\t})\r\n\t\t.then(response => {\r\n\t\t\tresolve(response.data);\r\n\t\t})\r\n\t\t.catch(function(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\r\n\t});\r\n\r\n}\r\n\r\nexport default {\r\n\tcomponents:{//组件模板\r\n\t},\r\n\tprops:{//组件道具（参数）\r\n\t\t/* ****属性用法*****\r\n\t\t * \r\n\t\t * 传递类型 type: Array | Number | String | Object\r\n\t\t * 为必传 required: true\r\n\t\t * 默认值 default: ''\r\n\t\t * \r\n\t\t */\r\n\t},\r\n    data () {//数据\r\n        return {\r\n        \t\r\n        }\r\n    },\r\n    methods: {//方法\r\n    \t\r\n    },\r\n    computed: {//计算属性\r\n        \t\r\n    },\r\n    watch: {//监测数据变化\r\n    \t\r\n\t},\r\n    \r\n    //===================组件钩子===========================\r\n    \r\n    created () {//实例被创建完毕之后执行\r\n    \t\r\n\t},\r\n    mounted () {//模板被渲染完毕之后执行\r\n    \t\r\n\t},\r\n\t\r\n\t//=================组件路由勾子==============================\r\n\t\r\n\tbeforeRouteEnter (to, from, next) {//在组件创建之前调用（放置页面加载时请求的Ajax）\r\n\t\t\r\n\t\t(async() => {//执行异步函数\r\n\t\t\t\r\n\t\t\t//async、await错误处理\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t/**\r\n\t\t\t * \r\n\t\t\t * ------串行执行---------\r\n\t\t\t * console.log(await getAjaxData());\r\n\t\t\t * ...\r\n\t\t\t * \r\n\t\t\t * ---------并行：将多个promise直接发起请求（先执行async所在函数），然后再进行await操作。（执行效率高、快）----------\r\n\t\t\t * let abc = getAjaxData();//先执行promise函数\r\n\t\t\t * ...\r\n\t\t\t * console.log(await abc);\r\n\t\t\t * ...\r\n\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t})();\r\n\t\t\r\n\t\tnext(vm => {\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t},\r\n\t\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n\r\n</style>"],"sourceRoot":"src\\views"}]}