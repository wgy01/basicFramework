{"remainingRequest":"E:\\MyProject\\vue-cli3.0\\node_modules\\babel-loader\\lib\\index.js!E:\\MyProject\\vue-cli3.0\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\MyProject\\vue-cli3.0\\src\\axios\\index.js","dependencies":[{"path":"E:\\MyProject\\vue-cli3.0\\src\\axios\\index.js","mtime":1534828821300},{"path":"E:\\MyProject\\vue-cli3.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534822204654},{"path":"E:\\MyProject\\vue-cli3.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"E:\\MyProject\\vue-cli3.0\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\r\n * axios配置管理\r\n */\nimport Vue from 'vue'; //vue组件\n\nvar vm = new Vue(); //vue实例\n\nimport axios from 'axios'; //axios组件\n\n/*\r\n\t---------------------vue内使用方式---------------------\r\n\t\r\n\tthis.$axios.post('接口路径', {\r\n\t\t要发送的数据\r\n\t})\r\n\t.then(response => {//返回请求数据\r\n\t\tconsole.log(response)\r\n\t})\r\n\t.catch(function (error) {//返回错误\r\n\t\tconsole.log(error);\r\n\t});\r\n\t\r\n*/\n//--------------------------------------------全局设置-------------------------------\n\naxios.defaults.baseURL = window._HOST.BASE_URL; //配置接口地址,在globalVariable.js\n//axios.defaults.headers.post['content-Type'] = 'appliction/x-www-form-urlencoded';//不能打开这个配置,打开用不了FormData\n\naxios.defaults.timeout = 5000; //响应时间\n\naxios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\n\naxios.defaults.transformRequest = function (_data) {\n  //第一个参数_data是接收过来的数据\n  var formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\n\n  for (var v in _data) {\n    //for in 遍历数据进行转换\n    formData.append(v, _data[v]);\n  }\n\n  console.log('-->发送了数据:', _data); // console.log('发送了数据:',formData);\n\n  return formData;\n}; //--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\n\n\naxios.interceptors.request.use(function (_config) {\n  //在请求发出之前对配置进行一些操作\n  var config = _config; //如果想每次请求的时候更改配置, 在这里增加config配置项\n\n  console.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\n  return config;\n}, function (err) {}); //------------------------添加一个响应拦截器----------------------\n\naxios.interceptors.response.use(function (_res) {\n  //在这里对返回的数据进行处理\n  console.log('<--返回了数据', _res.data);\n\n  if (_res.data.status == 200) {//获取数据成功\n  } else {\n    //获取数据失败\n    vm.$Message.error(_res.data.message);\n  }\n\n  return _res.data;\n}, function (_err) {\n  //处理错误\n  console.log('>>>>>>发生了ajax错误');\n  console.log('-------------------------------------------');\n\n  if (_err.response) {\n    //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\n    // console.log('_err.response',_err.response);\n    console.log('status:', _err.response.status);\n    console.log('statusText:', _err.response.statusText);\n  } else {} //一些错误是在设置请求的时候触发\t\t   \n  // console.log('_err.config',_err.config);\n\n\n  console.log('url:', _err.config.url);\n  console.log('method:', _err.config.method);\n  console.log('data:', _err.config.data);\n  console.log('headers:', _err.config.headers);\n  console.log('-------------------------------------------'); // return Promise.reject(_err);\n\n  return _err;\n}); //axios组件完毕------------------------------------------\n\nexport default axios;",{"version":3,"sources":["src\\axios\\index.js"],"names":["Vue","vm","axios","defaults","baseURL","window","_HOST","BASE_URL","timeout","withCredentials","transformRequest","_data","formData","FormData","v","append","console","log","interceptors","request","use","_config","config","method","url","err","response","_res","data","status","$Message","error","message","_err","statusText","headers"],"mappings":"AAAA;;;AAIA,OAAOA,GAAP,MAAgB,KAAhB,C,CAAqB;;AAErB,IAAMC,KAAK,IAAID,GAAJ,EAAX,C,CAAqB;;AAErB,OAAOE,KAAP,MAAkB,OAAlB,C,CAA0B;;AAE1B;;;;;;;;;;;;;;AAeA;;AAEAA,MAAMC,QAAN,CAAeC,OAAf,GAAyBC,OAAOC,KAAP,CAAaC,QAAtC,C,CAAgD;AAEhD;;AAEAL,MAAMC,QAAN,CAAeK,OAAf,GAAyB,IAAzB,C,CAA+B;;AAE/BN,MAAMC,QAAN,CAAeM,eAAf,GAAiC,IAAjC,C,CAAuC;AAEvC;;AAEAP,MAAMC,QAAN,CAAeO,gBAAf,GAAkC,UAASC,KAAT,EAAgB;AAAE;AAEnD,MAAIC,WAAW,IAAIC,QAAJ,EAAf,CAFiD,CAElB;;AAE/B,OAAI,IAAIC,CAAR,IAAaH,KAAb,EAAoB;AAAE;AAErBC,aAASG,MAAT,CAAgBD,CAAhB,EAAmBH,MAAMG,CAAN,CAAnB;AAEA;;AACDE,UAAQC,GAAR,CAAY,WAAZ,EAAyBN,KAAzB,EATiD,CAWjD;;AAEA,SAAOC,QAAP;AAEA,CAfD,C,CAiBA;;;AAEAV,MAAMgB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAASC,OAAT,EAAkB;AAAE;AAElD,MAAIC,SAASD,OAAb,CAFgD,CAGhD;;AAEAL,UAAQC,GAAR,CAAY,eAAeI,QAAQE,MAAvB,GAAgC,IAA5C,EAAkDF,QAAQjB,OAAR,GAAkBiB,QAAQG,GAA5E;AAEA,SAAOF,MAAP;AAEA,CATD,EASG,UAASG,GAAT,EAAc,CAEhB,CAXD,E,CAaA;;AAEAvB,MAAMgB,YAAN,CAAmBQ,QAAnB,CAA4BN,GAA5B,CAEC,UAASO,IAAT,EAAe;AAAE;AAEhBX,UAAQC,GAAR,CAAY,UAAZ,EAAwBU,KAAKC,IAA7B;;AAEA,MAAGD,KAAKC,IAAL,CAAUC,MAAV,IAAoB,GAAvB,EAA4B,CAAE;AAI7B,GAJD,MAIM;AAAE;AAEP5B,OAAG6B,QAAH,CAAYC,KAAZ,CAAkBJ,KAAKC,IAAL,CAAUI,OAA5B;AAEA;;AAED,SAAOL,KAAKC,IAAZ;AAEA,CAlBF,EAmBC,UAASK,IAAT,EAAe;AAAE;AAEhBjB,UAAQC,GAAR,CAAY,iBAAZ;AAEAD,UAAQC,GAAR,CAAY,6CAAZ;;AAEA,MAAGgB,KAAKP,QAAR,EAAkB;AAAE;AAEnB;AAEAV,YAAQC,GAAR,CAAY,SAAZ,EAAuBgB,KAAKP,QAAL,CAAcG,MAArC;AAEAb,YAAQC,GAAR,CAAY,aAAZ,EAA2BgB,KAAKP,QAAL,CAAcQ,UAAzC;AAEA,GARD,MAQO,CAEN,CAVD,CAQS;AAIT;;;AAEAlB,UAAQC,GAAR,CAAY,MAAZ,EAAoBgB,KAAKX,MAAL,CAAYE,GAAhC;AAEAR,UAAQC,GAAR,CAAY,SAAZ,EAAuBgB,KAAKX,MAAL,CAAYC,MAAnC;AAEAP,UAAQC,GAAR,CAAY,OAAZ,EAAqBgB,KAAKX,MAAL,CAAYM,IAAjC;AAEAZ,UAAQC,GAAR,CAAY,UAAZ,EAAwBgB,KAAKX,MAAL,CAAYa,OAApC;AAEAnB,UAAQC,GAAR,CAAY,6CAAZ,EA5Bc,CA8Bd;;AAEA,SAAOgB,IAAP;AAEA,CArDF,E,CAwDA;;AAEA,eAAe/B,KAAf","sourceRoot":"E:\\MyProject\\vue-cli3.0","sourcesContent":["/*\r\n * axios配置管理\r\n */\r\n\r\nimport Vue from 'vue'//vue组件\r\n\r\nconst vm = new Vue();//vue实例\r\n\r\nimport axios from 'axios';//axios组件\r\n\r\n/*\r\n\t---------------------vue内使用方式---------------------\r\n\t\r\n\tthis.$axios.post('接口路径', {\r\n\t\t要发送的数据\r\n\t})\r\n\t.then(response => {//返回请求数据\r\n\t\tconsole.log(response)\r\n\t})\r\n\t.catch(function (error) {//返回错误\r\n\t\tconsole.log(error);\r\n\t});\r\n\t\r\n*/\r\n\r\n//--------------------------------------------全局设置-------------------------------\r\n\r\naxios.defaults.baseURL = window._HOST.BASE_URL; //配置接口地址,在globalVariable.js\r\n\r\n//axios.defaults.headers.post['content-Type'] = 'appliction/x-www-form-urlencoded';//不能打开这个配置,打开用不了FormData\r\n\r\naxios.defaults.timeout = 5000; //响应时间\r\n\r\naxios.defaults.withCredentials = true; //允许携带cookie,实现跨域登录\t\r\n\r\n//-----------------在发送数据之前进行数据转换 , get不会转换,因为get走的是 parmas属性----------------------\r\n\r\naxios.defaults.transformRequest = function(_data) { //第一个参数_data是接收过来的数据\r\n\r\n\tvar formData = new FormData(); //使用formData方式发送表单 否则程序接收不到表单变量（formData可以实现文件的异步上传）\r\n\r\n\tfor(let v in _data) { //for in 遍历数据进行转换\r\n\r\n\t\tformData.append(v, _data[v]);\r\n\r\n\t}\r\n\tconsole.log('-->发送了数据:', _data);\r\n\r\n\t// console.log('发送了数据:',formData);\r\n\r\n\treturn formData;\r\n\r\n};\r\n\r\n//--------------------添加一个请求拦截器,每次请求都会拦截一次,但是尽量使用全局设置,方便每次使用不同的设置--------------\r\n\r\naxios.interceptors.request.use(function(_config) { //在请求发出之前对配置进行一些操作\r\n\r\n\tlet config = _config;\r\n\t//如果想每次请求的时候更改配置, 在这里增加config配置项\r\n\r\n\tconsole.log('-->请求了URL(' + _config.method + '):', _config.baseURL + _config.url);\r\n\r\n\treturn config;\r\n\r\n}, function(err) {\r\n\r\n});\r\n\r\n//------------------------添加一个响应拦截器----------------------\r\n\r\naxios.interceptors.response.use(\r\n\r\n\tfunction(_res) { //在这里对返回的数据进行处理\r\n\t\t\r\n\t\tconsole.log('<--返回了数据', _res.data);\r\n\r\n\t\tif(_res.data.status == 200) { //获取数据成功\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}else { //获取数据失败\r\n\r\n\t\t\tvm.$Message.error(_res.data.message);\r\n\r\n\t\t}\r\n\r\n\t\treturn _res.data;\r\n\r\n\t},\r\n\tfunction(_err) { //处理错误\r\n\r\n\t\tconsole.log('>>>>>>发生了ajax错误');\r\n\r\n\t\tconsole.log('-------------------------------------------');\r\n\r\n\t\tif(_err.response) { //请求已经发出，但是服务器响应返回的状态码不在2xx的范围内\t\t\r\n\r\n\t\t\t// console.log('_err.response',_err.response);\r\n\r\n\t\t\tconsole.log('status:', _err.response.status);\r\n\r\n\t\t\tconsole.log('statusText:', _err.response.statusText);\r\n\r\n\t\t} else { //一些错误是在设置请求的时候触发\t\t   \r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t// console.log('_err.config',_err.config);\r\n\r\n\t\tconsole.log('url:', _err.config.url);\r\n\r\n\t\tconsole.log('method:', _err.config.method);\r\n\r\n\t\tconsole.log('data:', _err.config.data);\r\n\r\n\t\tconsole.log('headers:', _err.config.headers);\r\n\r\n\t\tconsole.log('-------------------------------------------');\r\n\r\n\t\t// return Promise.reject(_err);\r\n\r\n\t\treturn _err;\r\n\r\n\t}\r\n);\r\n\r\n//axios组件完毕------------------------------------------\r\n\r\nexport default axios"]}]}